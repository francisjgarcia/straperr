# .github/workflows/deploy.yml
name: Deploy application to server

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: read

defaults:
  run:
    shell: bash
    working-directory: .

jobs:
  setup:
    name: Setup environment
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || startsWith(github.ref, 'refs/tags/v') && 'production' }}
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    outputs:
      environment: ${{ steps.get_variables.outputs.environment }}
      tag_version: ${{ steps.get_variables.outputs.tag_version }}
      repo_name: ${{ steps.get_variables.outputs.repo_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment output
        id: get_variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_BRANCH: ${{ github.ref }}
        run: |
          echo "environment=${{ github.ref == 'refs/heads/main' && 'production' || startsWith(github.ref, 'refs/tags/v') && 'production' }}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_VERSION="${GITHUB_REF#refs/tags/}"
          else
            TAG_VERSION=$(git tag -l | sort -V | tail -n 1)
          fi
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "repo_name=$(echo ${{ env.GITHUB_REPOSITORY }} | awk -F/ '{print $2}')" >> $GITHUB_OUTPUT

      - name: Create setup summary
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_BRANCH: ${{ github.ref }}
          ENVIRONMENT: ${{ steps.get_variables.outputs.environment }}
          TAG_VERSION: ${{ steps.get_variables.outputs.tag_version }}
          REPO_NAME: ${{ steps.get_variables.outputs.repo_name }}
        run: |
          echo "## Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Output variables" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag version: [${{ env.TAG_VERSION }}](https://github.com/${{ env.GITHUB_REPOSITORY }}/releases/tag/${{ env.TAG_VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "- Repository name: [${{ env.REPO_NAME }}](https://github.com/${{ env.GITHUB_REPOSITORY }})" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to server
    needs: [setup]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.setup.outputs.environment }}
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Add SSH private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PROXY_PORT: ${{ secrets.SSH_PROXY_PORT }}
          SSH_PROXY_HOST: ${{ secrets.SSH_PROXY_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          eval $(ssh-agent)
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SSH_PROXY_PORT }} -H ${{ env.SSH_PROXY_HOST }} >> ~/.ssh/known_hosts

      - name: Add SSH config
        env:
          SSH_PRIVATE_HOST: ${{ secrets.SSH_PRIVATE_HOST }}
          SSH_PRIVATE_USER: ${{ secrets.SSH_PRIVATE_USER }}
          SSH_PRIVATE_PORT: ${{ secrets.SSH_PRIVATE_PORT }}
          SSH_PROXY_USER: ${{ secrets.SSH_PROXY_USER }}
          SSH_PROXY_HOST: ${{ secrets.SSH_PROXY_HOST }}
          SSH_PROXY_PORT: ${{ secrets.SSH_PROXY_PORT }}
        run: |
          echo "Host proxy
                HostName ${{ env.SSH_PRIVATE_HOST }}
                User ${{ env.SSH_PRIVATE_USER }}
                Port ${{ env.SSH_PRIVATE_PORT }}
                ProxyJump ${{ env.SSH_PROXY_USER }}@${{ env.SSH_PROXY_HOST }}:${{ env.SSH_PROXY_PORT }}
                StrictHostKeyChecking no
                UserKnownHostsFile /dev/null
          " >> ~/.ssh/config

      - name: Create docker context
        run: |
          docker context create proxy --docker host=ssh://proxy
          docker context use proxy

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: ${{ env.REPOSITORY_OWNER }}
          password: ${{ env.GITHUB_TOKEN }}

      - name: Pull docker image
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
        run: docker pull ghcr.io/${{ env.GITHUB_REPOSITORY }}:${{ env.TAG_VERSION }}

      - name: Deploy to server
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          REPO_NAME: ${{ needs.setup.outputs.repo_name }}
          TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
          DOCKER_DNS1: ${{ vars.DOCKER_DNS1 }}
          DOCKER_DNS2: ${{ vars.DOCKER_DNS2 }}
          DOCKER_NETWORK: ${{ vars.DOCKER_NETWORK }}
          DOCKER_HEALTHCHECK_URL: ${{ vars.DOCKER_HEALTHCHECK_URL }}
          DOCKER_MEMORY_LIMIT: ${{ vars.DOCKER_MEMORY_LIMIT }}
          DOCKER_MEMORY_RESERVATION: ${{ vars.DOCKER_MEMORY_RESERVATION }}
          FLASK_ENV: ${{ vars.FLASK_ENV }}
          FLASK_DEBUG: ${{ vars.FLASK_DEBUG }}
        run: |
          if [ "$(docker ps -a -q -f name=${{ env.REPO_NAME }})" ]; then
            docker rm -f ${{ env.REPO_NAME }}
          fi
          docker run -d \
            --name ${{ env.REPO_NAME }} \
            --hostname ${{ env.REPO_NAME }} \
            --network ${{ env.DOCKER_NETWORK }} \
            --dns=${{ env.DOCKER_DNS1 }} \
            --dns=${{ env.DOCKER_DNS2 }} \
            -e FLASK_ENV=${{ env.FLASK_ENV }} \
            -e FLASK_DEBUG=${{ env.FLASK_DEBUG }} \
            --health-cmd="curl -f ${{ env.DOCKER_HEALTHCHECK_URL }} || exit 1" \
            --health-start-period=30s \
            --health-interval=1h \
            --health-timeout=10s \
            --health-retries=3 \
            --memory="${{ env.DOCKER_MEMORY_LIMIT }}" \
            --memory-reservation="${{ env.DOCKER_MEMORY_RESERVATION }}" \
            --restart always \
          ghcr.io/${{ env.GITHUB_REPOSITORY }}:${{ env.TAG_VERSION }}

      - name: Remove old docker images
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          for DOCKER_IMAGE_ID in $(docker images -q ghcr.io/${{ env.GITHUB_REPOSITORY }}); do
            docker rmi -f $DOCKER_IMAGE_ID || true
          done

      - name: Create deploy summary
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
        run: |
          echo "## Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy ghcr.io/${{ env.GITHUB_REPOSITORY }}:${{ env.TAG_VERSION }} to server successful!" >> $GITHUB_STEP_SUMMARY
          echo "- Remove old docker images." >> $GITHUB_STEP_SUMMARY
